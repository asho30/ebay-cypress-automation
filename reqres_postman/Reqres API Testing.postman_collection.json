{
	"info": {
		"_postman_id": "ff5432ca-0ffa-49d4-b689-f14bd9638640",
		"name": "Reqres API Testing",
		"description": "Postman collection for testing Reqres API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32163694"
	},
	"item": [
		{
			"name": "GET All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Data array exists and is not empty\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"pm.test(\"Each user has required fields\", () => {",
							"    const jsonData = pm.response.json();",
							"    jsonData.data.forEach(user => {",
							"        pm.expect(user).to.have.property(\"id\");",
							"        pm.expect(user).to.have.property(\"email\");",
							"        pm.expect(user).to.have.property(\"first_name\");",
							"        pm.expect(user).to.have.property(\"last_name\");",
							"        pm.expect(user).to.have.property(\"avatar\");",
							"    });",
							"});",
							"",
							"pm.test(\"Pagination fields are present\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"page\");",
							"    pm.expect(jsonData).to.have.property(\"per_page\");",
							"    pm.expect(jsonData).to.have.property(\"total\");",
							"    pm.expect(jsonData).to.have.property(\"total_pages\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Response contains correct name and job\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));",
							"    pm.expect(jsonData.job).to.eql(pm.variables.get(\"job\"));",
							"});",
							"",
							"pm.test(\"Response contains id and createdAt\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{name}}\", \"job\": \"{{job}}\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	]
}